pipeline{
    agent none    
    environment{
        FRONTEND_IMAGE_NAME = 'shashank9928/linkproj-fe'
        BACKEND_IMAGE_NAME = 'shashank9928/linkproj-be'
        DOCKER_CREDENTIALS_ID = 'dock-creds'
        KUBECONFIG = 'local-kubeconfig'
        FRONTEND_DEPLOYMENT_FILE = 'k8s/manifests/frontend-deployment.yaml'
        BACKEND_DEPLOYMENT_FILE = 'k8s/manifests/backend-deployment.yaml'
        FRONTEND_DIR = 'frontend'
        BACKEND_DIR = 'backend'
    }

    stages {
        stage('Checkout') {
            agent { label 'master' }
            steps {
                checkout scm
            }
        }

        stage('Install Node.js and npm') {
            agent { label 'master' }
            steps {
                script {
                    echo 'Installing Node.js and npm on the agent...'

                    // Check if npm is already installed
                    def npmInstalled = sh(script: 'npm -v', returnStatus: true) == 0

                    if (!npmInstalled) {
                        echo 'npm is not installed, installing...'
                        // Install Node.js and npm
                        sh '''
                        curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
                        sudo apt-get install -y nodejs
                        '''
                    } else {
                        echo 'npm is already installed.'
                    }
                }
            }
        }
        
        stage('Install Dependencies for Frontend') {
            agent { label 'master' }
            steps {
                script {
                    echo "Running npm install and npm run build for frontend..."
                    dir("${FRONTEND_DIR}") {
                        sh 'npm install'
                        sh 'npm run build'
                    }
                }
            }
        }

        stage('Install Dependencies for Backend') {
            agent { label 'master' }
            steps {
                script {
                    echo "Running npm install for backend..."
                    dir("${BACKEND_DIR}") {
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            agent { label 'master' }
            steps {
                script {
                    // Build Docker image 
                    def buildId = "${BUILD_NUMBER}"

                    docker.build("${FRONTEND_IMAGE_NAME}:${buildId}", "-f ${WORKSPACE}/${FRONTEND_DIR}/Dockerfile ./${FRONTEND_DIR}")

                    docker.build("${BACKEND_IMAGE_NAME}:${buildId}", "-f ${WORKSPACE}/${BACKEND_DIR}/Dockerfile ./${BACKEND_DIR}")
                }
            }
        }

        stage('Login and Push Docker Image') { 
            agent { label 'master' }
            steps {
                script {
                    def buildId = "${BUILD_NUMBER}"

                    // Check if the frontend image exists using 'docker images' command
                    def frontendImageExists = sh(script: "docker images -q ${FRONTEND_IMAGE_NAME}:${buildId}", returnStatus: true) == 0
                    if (frontendImageExists) {
                        echo "Pushing frontend image ${FRONTEND_IMAGE_NAME}:${buildId}..."
                        // Login and push frontend Docker image
                        docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                            docker.image("${FRONTEND_IMAGE_NAME}:${buildId}").push("${buildId}")
                        }
                    } else {
                        error "Frontend image ${FRONTEND_IMAGE_NAME}:${buildId} not found, skipping push."
                    }

                    // Check if the backend image exists using 'docker images' command
                    def backendImageExists = sh(script: "docker images -q ${BACKEND_IMAGE_NAME}:${buildId}", returnStatus: true) == 0
                    if (backendImageExists) {
                        echo "Pushing backend image ${BACKEND_IMAGE_NAME}:${buildId}..."
                        // Login and push backend Docker image
                        docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                            docker.image("${BACKEND_IMAGE_NAME}:${buildId}").push("${buildId}")
                        }
                    } else {
                        error "Backend image ${BACKEND_IMAGE_NAME}:${buildId} not found, skipping push."
                    }
                }
            }
        }


        stage('Update Kubernetes Deployment Manifests') {
            agent { label 'master' }
            steps {
                script {
                    def buildId = "${BUILD_NUMBER}"

                    // Update the image in frontend deployment YAML
                    def frontendDockerImage = "${FRONTEND_IMAGE_NAME}:${buildId}"
                    sh """
                        sudo sed -i 's|image: .*|image: ${frontendDockerImage}|' ${FRONTEND_DEPLOYMENT_FILE}
                        cat k8s/manifests/frontend-deployment.yaml
                    """

                    // Update the image in backend deployment YAML
                    def backendDockerImage = "${BACKEND_IMAGE_NAME}:${buildId}"
                    sh """
                        sudo sed -i 's|image: .*|image: ${backendDockerImage}|' ${BACKEND_DEPLOYMENT_FILE}
                        cat k8s/manifests/backend-deployment.yaml
                    """
                }
            }
        }

        stage('Stash Updated Deployment Files') {
            steps {
                // Stash the updated deployment files so that they can be used in the next stage
                stash includes: "${FRONTEND_DEPLOYMENT_FILE}, ${BACKEND_DEPLOYMENT_FILE}", name: 'deploy-files'
            }
        }

        stage('Deploy to Kubernetes-Cluster') {
            agent { label 'k8-master' }
            steps {
                withCredentials([file(credentialsId: 'local-kubeconfig', variable: 'KUBE_CONFIG_FILE')]) {
                    script {
                        // Unstash the updated files in the 'k8-master' agent's workspace
                        unstash 'deploy-files'
                        
                        echo "Deploying to Kubernetes..."
                        // Apply updated manifests to the EKS cluster
                        sh """
                            export KUBECONFIG=$KUBE_CONFIG_FILE
                            kubectl apply -f ${FRONTEND_DEPLOYMENT_FILE}
                            kubectl apply -f ${BACKEND_DEPLOYMENT_FILE}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed. Cleaning up..."
            script{
                def buildId = "${BUILD_NUMBER}"
                sh """
                    docker rmi ${FRONTEND_IMAGE_NAME}:${buildId} || true
                    docker rmi ${BACKEND_IMAGE_NAME}:${buildId} || true
                    docker ps -a -q --filter 'status=exited' | xargs docker rm || true
                """
            }
        }
    }
}
