pipeline {
    agent none  // No global agent, specify agent for each stage
    environment {
        AWS_CREDENTIALS_ID = 'aws-creds'
        AWS_REGION = 'us-west-2'  // AWS Region
        DOCKER_REGISTRY = 'docker.io'  // Replace with your Docker registry
        DOCKER_REPO = 'shashank9928/link-project'
        KUBECONFIG = 'local-kubeconfig'
        FRONTEND_DIR = 'frontend'
        BACKEND_DIR = 'backend'
        FRONTEND_IMAGE = "frontend-img:${BUILD_NUMBER}"
        BACKEND_IMAGE = "backend-img:${BUILD_NUMBER}"
        FRONTEND_DEPLOYMENT_FILE = 'k8s/manifests/frontend-deployment.yaml'  // Path to frontend deployment YAML
        BACKEND_DEPLOYMENT_FILE = 'k8s/manifests/backend-deployment.yaml'  // Path to backend deployment YAML
    }

    stages {
        stage('Checkout') {
            agent { label 'k8-agent' }
            steps {
                checkout scm
            }
        }

        stage('Install Node.js and npm') {
            agent { label 'k8-agent' }
            steps {
                script {
                    echo 'Installing Node.js and npm on the agent...'

                    // Check if npm is already installed
                    def npmInstalled = sh(script: 'npm -v', returnStatus: true) == 0

                    if (!npmInstalled) {
                        echo 'npm is not installed, installing...'
                        // Install Node.js and npm
                        sh '''
                        curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
                        sudo apt-get install -y nodejs
                        '''
                    } else {
                        echo 'npm is already installed.'
                    }
                }
            }
        }

        stage('Install Dependencies for Frontend') {
            agent { label 'k8-agent' }
            steps {
                script {
                    echo "Running npm install and npm run build for frontend..."
                        dir("${FRONTEND_DIR}") {
                            sh 'npm install'
                            sh 'npm run build'
                        }
                    }
                }
            }

        stage('Install Dependencies for Backend') {
            agent { label 'master' }
            steps {
                script {
                    echo "Running npm install for backend..."
                        dir("${BACKEND_DIR}") {
                            sh 'npm install'
                        }
                    }
                }
            }

          stage('Building Docker Image') {
              agent { label 'k8-agent' }
              steps {
                  script {
                      echo "Building Frontend Docker image..."
                      def buildId = "${BUILD_NUMBER}"
                      sh """
                          docker build -t ${DOCKER_REPO}/frontend:${buildId} ./frontend
                      """

                      echo "Building Backend Docker image..."

                      sh """
                        docker build -t ${DOCKER_REPO}/backend:${buildId} ./backend
                      """
                  }
            }
        }

        stage('Login to DockerHub') {
            agent { label 'k8-agent' }
            steps {
                script {
                    // Login to DockerHub using Jenkins credentials
                    withCredentials([usernamePassword(credentialsId: 'dock-creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    }
                }
            }
        }

        stage('Push Frontend Docker Image to ECR') {
            agent { label 'k8-agent' }
            steps {
                script {
                    echo "Pushing Frontend Docker image to ECR..."
                    def buildId = "${BUILD_NUMBER}"
                    sh "docker push ${DOCKER_REPO}/frontend:${buildId}"

                    echo "Pushing Backend Docker image to ECR..."
                    
                    sh "docker push ${DOCKER_REPO}/backend:${buildId}"
                }
            }
        }

        stage('Update Kubernetes Deployment Manifests') {
            agent { label 'k8-agent' }
            steps {
                script {
                    def buildId = "${BUILD_NUMBER}"

                    // Update the image in frontend deployment YAML
                    def frontendDockerImage = "${DOCKER_REPO}/frontend:${buildId}"
                    sh """
                        sed -i 's|image: .*|image: ${frontendDockerImage}|' ${FRONTEND_DEPLOYMENT_FILE}
                    """

                    // Update the image in backend deployment YAML
                    def backendDockerImage = "${DOCKER_REPO}/backend:${buildId}"
                    sh """
                        sed -i 's|image: .*|image: ${backendDockerImage}|' ${BACKEND_DEPLOYMENT_FILE}
                    """
                }
            }
        }

        stage('Deploy to EKS') {
            agent { label 'k8-master' }
            steps {
                withCredentials([file(credentialsId: 'my-kubeconfig', variable: 'KUBE_CONFIG_FILE')]) {
                    script {
                        echo "Deploying to EKS..."
                        // Apply updated manifests to the EKS cluster
                        sh """
                            export KUBECONFIG=$KUBE_CONFIG_FILE && kubectl apply -f ${FRONTEND_DEPLOYMENT_FILE}
                            export KUBECONFIG=$KUBE_CONFIG_FILE && kubectl apply -f ${BACKEND_DEPLOYMENT_FILE}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed. Cleaning up..."
            script{
                def buildId = "${BUILD_NUMBER}"
                sh """
                    docker rmi ${DOCKER_REPO}/frontend:${buildId} || true
                    docker rmi ${DOCKER_REPO}/backend:${buildId} || true
                    docker ps -a -q --filter 'status=exited' | xargs docker rm || true
                """
            }
        }
    }
}
