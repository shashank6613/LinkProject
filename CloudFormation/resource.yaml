AWSTemplateFormatVersion: '2010-09-09'
Description: vpc, subnet, ig

Parameters:
  BucketName:
    Type: String
    Description: S3 Bucket Name
    Default: 'twentysixthbucket'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: PublicSubnet

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Route for the public subnet to the Internet
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
      - Key: stack
        Value: production
        
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: 'us-east-1b'
      Tags:
        - Key: Name
          Value: 'PrivateSubnet'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'PrivateRouteTable'    

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref NATGateway
        
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  MySubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: 'us-east-1c'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'ProjSubnet1'

  # Subnet 2 for EKS Worker Nodes
  MySubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: 'us-east-1d'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'ProjSubnet2'

  RouteTableAssociationMySubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet1
      RouteTableId: !Ref PublicRouteTable

  RouteTableAssociationMySubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet2
      RouteTableId: !Ref PublicRouteTable

    # Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH and HTTP access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "30000"
          ToPort: "32767"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "udp"
          FromPort: "53"
          ToPort: "53"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "6443"
          ToPort: "6443"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "10250"
          ToPort: "10250"
          CidrIp: "0.0.0.0/0"    
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

  EC2InstanceRole:      # IAM Role for EC2 instances to access ECR, EKS, EC2, and VPC
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ec2.amazonaws.com'  # EC2 instances can assume this role
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess'  # Full access to ECR (push/pull/list)
        - 'arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy'             # EKS access
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'                   # EC2 full access (adjust as needed)
        - 'arn:aws:iam::aws:policy/AmazonVPCFullAccess'                   # VPC access
      
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

# EC2 Instances (Jenkins Master and Jenkins Agent)
  JenkinsMasterInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.medium
      ImageId: 'ami-0e1bed4f06a3b463d'  # Use a valid AMI ID for your region
      SubnetId: !Ref PublicSubnet
      KeyName: north
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        apt update
        apt install openjdk-17-jre -y
        apt update
        apt install curl -y
        apt update
        apt install python3 -y
        apt update
        wget -O /usr/share/keyrings/jenkins-keyring.asc https://pkg.jenkins.io/debian/jenkins.io-2023.key
        echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" https://pkg.jenkins.io/debian binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
        apt-get update
        apt-get install jenkins -y
        apt-get update
        apt-get install docker.io -y
        systemctl start docker
        systemctl enable docker
        curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        apt install postgresql postgresql-contrib -y
        sudo usermod -aG docker jenkins
        systemctl restart docker
        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
        apt update
        apt install kubectl -y
        ARCH=amd64
        PLATFORM=$(uname -s)_$ARCH
        curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
        curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
        tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
        sudo mv /tmp/eksctl /usr/local/bin
        sudo apt -y install unzip curl
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        apt update  
      Tags:
        - Key: Name
          Value: 'JenkinsMaster'

  JenkinsAgentInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.medium
      ImageId: 'ami-0e1bed4f06a3b463d'  # Use a valid AMI ID for your region
      SubnetId: !Ref PrivateSubnet
      KeyName: north
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        apt update
        apt install openjdk-17-jre -y
        apt update
        apt install curl -y
        apt update
        apt install python3 -y
        apt-get update
        apt-get install docker.io -y
        systemctl start docker
        systemctl enable docker
        apt install postgresql postgresql-contrib -y
        systemctl restart docker
        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
        apt update
        apt install kubectl -y
        ARCH=amd64
        PLATFORM=$(uname -s)_$ARCH
        curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
        curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
        tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
        sudo mv /tmp/eksctl /usr/local/bin
        sudo apt -y install unzip curl
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        apt update
      Tags:
        - Key: Name
          Value: 'JenkinsAgent'

  # RDS Subnet Group (Ensure RDS is deployed in the VPC)
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'RDS Subnet Group'
      SubnetIds:
        - !Ref MySubnet1
        - !Ref MySubnet2
        
  # RDS PostgreSQL Database
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: 'MyPGDB'
      Engine: 'postgres'
      DBInstanceClass: 'db.t3.micro'
      AllocatedStorage: '20'
      MasterUsername: 'shank'
      MasterUserPassword: 'admin12345'
      VPCSecurityGroups:
        - !Ref EC2SecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: 'false'

  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 'proj-repo'

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName


Outputs:
  VPCId:
    Value: !Ref VPC
    Description: 'VPC ID'
  
  PublicSubnetId:
    Value: !Ref PublicSubnet
    Description: 'Public Subnet ID'
  
  JenkinsMasterInstanceId:
    Value: !Ref JenkinsMasterInstance
    Description: 'Jenkins Master EC2 Instance ID'
  
  JenkinsAgentInstanceId:
    Value: !Ref JenkinsAgentInstance
    Description: 'Jenkins Agent EC2 Instance ID'

  ECRRepositoryName:
    Description: 'ECR Repository Name'
    Value: !Ref ECRRepository

  NATGatewayID:
    Description: "The ID of the NAT Gateway"
    Value: !Ref NATGateway

  DBEndpoint:
    Description: "The endpoint of the RDS DB Instance"
    Value: !GetAtt RDSInstance.Endpoint.Address

  S3BucketName:
    Description: "The name of the S3 bucket"
    Value: !Ref S3Bucket
    
